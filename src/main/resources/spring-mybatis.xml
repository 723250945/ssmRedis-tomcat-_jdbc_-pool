<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.test" />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		&lt;!&ndash; 初始化连接大小 &ndash;&gt;
		<property name="initialSize" value="${initialSize}"></property>
		&lt;!&ndash; 连接池最大数量 &ndash;&gt;
		<property name="maxActive" value="${maxActive}"></property>
		&lt;!&ndash; 连接池最大空闲 &ndash;&gt;
		<property name="maxIdle" value="${maxIdle}"></property>
		&lt;!&ndash; 连接池最小空闲 &ndash;&gt;
		<property name="minIdle" value="${minIdle}"></property>
		&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
		<property name="maxWait" value="${maxWait}"></property>
	</bean>-->
	<!--c3p0与dbcp区别：他们两个都是单线程的连接池
	dbcp没有自动的去回收空闲连接的功能
	c3p0有自动回收空闲连接功能
	Tomcat jdbc pool的优点：
	(1)    tomcat jdbc pool 近乎兼容 dbcp ，性能更高
	(2)    异步方式获取连接
	(3)    tomcat jdbc pool 是 tomcat 的一个模块，基于 tomcat JULI，使用 Tomcat 的日志框架
	(4)    使用 javax.sql.PooledConnection 接口获取连接
	(5)    支持高并发应用环境
	(6)    超简单，核心文件只有8个，比 c3p0 还少
	(7)    更好的空闲连接处理机制
	(8)    支持 JMX
	(9)    支持 XA Connection-->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapping/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-cache.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.test.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- redis数据源 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	    <property name="maxIdle" value="${redis.maxIdle}" />  
	    <property name="maxTotal" value="${redis.maxActive}" />  
	    <property name="maxWaitMillis" value="${redis.maxWait}" />  
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
	</bean>
	<!-- Spring-redis连接池管理工厂 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig" />  
	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<bean id="redisCacheTransfer" class="com.test.cache.RedisCacheTransfer">
	    <property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>
	</bean>
</beans>